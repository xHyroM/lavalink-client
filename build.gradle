
buildscript {
    ext {
        grgitVersion = '2.2.1'
        sonarqubeVersion = '2.6.2'
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar:grgit:${grgitVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'


group = 'com.fredboat.lavalink.client'
version = "${versionFromTag()}"
description = 'JDA based client for the Lavalink-Server'

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}


ext {
    //@formatter:off
    gradleVersion               = '7.4.2'

    lavaplayerVersion           = '1.3.98.4'
    javaWebSocketVersion        = '1.5.2'
    slf4jVersion                = '2.0.3'
    jsonOrgVersion              = '20220924'
    jdaVersion                  = '5.0.0-alpha.21'
    spotbugsAnnotationsVersion  = '4.7.2'
    prometheusVersion           = '0.9.0'

    junitJupiterVersion         = '5.9.1'
    junitPlatformVersion        = '1.9.1'
    logbackVersion              = '1.4.3'
    unirestVersion              = '1.4.9'

    //@formatter:on
}


dependencies {
    implementation group: 'com.github.walkyst', name: 'lavaplayer-fork', version: lavaplayerVersion
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: javaWebSocketVersion
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    implementation group: 'org.json', name: 'json', version: jsonOrgVersion
    compileOnly group: 'net.dv8tion', name: 'JDA', version: jdaVersion
    testImplementation group: 'net.dv8tion', name: 'JDA', version: jdaVersion
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
    compileOnly group: 'io.prometheus', name: 'simpleclient', version: prometheusVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: junitPlatformVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: junitPlatformVersion
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    testImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: unirestVersion
}


compileJava {
    dependsOn(clean)
    options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


wrapper {
    gradleVersion = project.ext.gradleVersion
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}


build {
    doLast {
        println 'Version: ' + version
    }
}

test {
    useJUnitPlatform()

    systemProperty("TEST_TOKEN", System.getProperty("TEST_TOKEN"))
    systemProperty("TEST_VOICE_CHANNEL", System.getProperty("TEST_VOICE_CHANNEL"))

    jacoco {
        includes['lavalink.client.*']
    }
}

sonarqube {
    properties {
        property "sonar.inclusions", "src/main/java/**/*"
    }
}


jar.mustRunAfter clean
publishToMavenLocal.dependsOn jar

// called by jitpack

task install {
    dependsOn test
    dependsOn publishToMavenLocal
    doLast {
        println 'Version: ' + version
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(tasks["shadowJar"])

            repositories.maven {
                url = uri("https://repo.jopga.me/releases")

                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }

            groupId = rootProject.group as String
            artifactId = project.name
            version = rootProject.version as String

            pom {
                name.set("Lavalink-Client")
            }
        }
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
String versionFromTag() {

    def headTag = grgit.tag.list().find {
        it.commit == grgit.head()
    }

    def clean = grgit.status().clean //uncommitted changes? -> should be SNAPSHOT

    if (headTag && clean) {
        headTag.getName()
    } else {
        "${grgit.head().id}-SNAPSHOT"
    }
}
